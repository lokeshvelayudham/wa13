import numpy as np
import matplotlib.pyplot as plt
# Define the hypotheses and their probabilities
hypotheses = ["h1", "h2", "h3", "h4", "h5"]
prior = [0.1, 0.2, 0.4, 0.2, 0.1]
likelihood = [1, 0.75, 0.5, 0.25, 0]
# Define a function to generate a dataset of size n for a given hypothesis
def generate_data(hypothesis, n):
    if hypothesis == "h1":
        return [1] * n
    return [1 if np.random.rand() < likelihood[hypotheses.index(hypothesis)]
else 0 for _ in range(n)]
# Define a function to compute the posterior probabilities for each hypothesis
given a dataset
def compute_posterior(data):
posteriors = [prior[i] * (likelihood[i] ** sum(data)) * ((1 -
likelihood[i]) ** (len(data) - sum(data))) for i in range(len(hypotheses))]
return [p / sum(posteriors) for p in posteriors]
# Define a function to compute the probability of the next data point being
lime given the dataset
def compute_next_lime(data):
posteriors = compute_posterior(data)
return sum([posteriors[i] * likelihood[i] for i in
range(len(hypotheses))])
# Define a function to compute the maximum a posteriori (MAP) hypothesis given
the dataset
def compute_map(data):
posteriors = compute_posterior(data)
return hypotheses[posteriors.index(max(posteriors))]
# Define a function to compute the maximum likelihood (ML) hypothesis given
the dataset
def compute_ml(data):
likelihoods = [likelihood[i] ** sum(data) * ((1 - likelihood[i]) **
(len(data) - sum(data))) for i in range(len(hypotheses))]
return hypotheses[likelihoods.index(max(likelihoods))]
# Generate the datasets for h3 and h4
data_h3 = generate_data("h3", 100)
data_h4 = generate_data("h4", 100)
# Plot the graphs for P(DN+1=lime|hMAP) and P(DN+1=lime|hML) as N varies from
1 to 100
plt.figure(figsize=(12, 8))
# Plot the graph for h3
plt.subplot(2, 1, 1)
plt.title("Data generated by h3")
plt.xlabel("N")
plt.ylabel("P(DN+1=lime|hMAP) or P(DN+1=lime|hML)")
plt.ylim(0, 1)
next_lime_map_h3 = [likelihood[hypotheses.index(compute_map(data_h3[:n]))] for
n in range(1, 101)]
next_lime_ml_h3 = [likelihood[hypotheses.index(compute_ml(data_h3[:n]))] for n
in range(1, 101)]
plt.plot(range(1, 101), next_lime_map_h3, label="P(DN+1=lime|hMAP)")
plt.plot(range(1, 101), next_lime_ml_h3, label="P(DN+1=lime|hML)")
plt.legend()
# Plot the graph for h4
plt.subplot(2, 1, 2)
plt.title("Data generated by h4")
plt.xlabel("N")
plt.ylabel("P(DN+1=lime|hMAP) or P(DN+1=lime|hML)")
plt.ylim(0, 1)
next_lime_map_h4 = [likelihood[hypotheses.index(compute_map(data_h4[:n]))] for
n in range(1, 101)]
next_lime_ml_h4 = [likelihood[hypotheses.index(compute_ml(data_h4[:n]))] for n
in range(1, 101)]
plt.plot(range(1, 101), next_lime_map_h4, label="P(DN+1=lime|hMAP)")
plt.plot(range(1, 101), next_lime_ml_h4, label="P(DN+1=lime|hML)")
plt.legend()
plt.show()